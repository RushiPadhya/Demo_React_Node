{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nvar CCardImage = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    _b = _a.component,\n    Component = _b === void 0 ? 'img' : _b,\n    orientation = _a.orientation,\n    rest = __rest(_a, [\"children\", \"className\", \"component\", \"orientation\"]);\n  return React.createElement(Component, __assign({\n    className: classNames(orientation ? \"card-img-\".concat(orientation) : 'card-img', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCCardImage.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  orientation: PropTypes.oneOf(['top', 'bottom'])\n};\nCCardImage.displayName = 'CCardImage';\nexport { CCardImage };","map":{"version":3,"names":["CCardImage","forwardRef","_a","ref","children","className","_b","component","Component","orientation","rest","__rest","React","createElement","__assign","classNames","concat","propTypes","PropTypes","node","string","elementType","oneOf","displayName"],"sources":["C:\\Users\\Syndell025\\OneDrive\\Documents\\GitHub\\Demo_React_Node\\frontend\\node_modules\\@coreui\\react\\src\\components\\card\\CCardImage.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardImageProps\n  extends ImgHTMLAttributes<HTMLImageElement | HTMLOrSVGElement | HTMLOrSVGImageElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Optionally orientate the image to the top, bottom, or make it overlaid across the card.\n   */\n  orientation?: 'top' | 'bottom'\n}\n\nexport const CCardImage = forwardRef<\n  HTMLImageElement | HTMLOrSVGElement | HTMLOrSVGImageElement,\n  CCardImageProps\n>(({ children, className, component: Component = 'img', orientation, ...rest }, ref) => {\n  return (\n    <Component\n      className={classNames(orientation ? `card-img-${orientation}` : 'card-img', className)}\n      {...rest}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCCardImage.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  orientation: PropTypes.oneOf(['top', 'bottom']),\n}\n\nCCardImage.displayName = 'CCardImage'\n"],"mappings":";;;;IAoBaA,UAAU,GAAGC,UAAU,CAGlC,UAACC,EAA2E,EAAEC,GAAG;EAA9E,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,EAAA,GAAAJ,EAAA,CAAAK,SAA4B;IAAjBC,SAAS,GAAAF,EAAA,cAAG,KAAK,GAAAA,EAAA;IAAEG,WAAW,GAAAP,EAAA,CAAAO,WAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAT,EAAA,EAAzE,qDAA2E,CAAF;EAC1E,OACEU,KAAA,CAAAC,aAAA,CAACL,SAAS,EAAAM,QAAA;IACRT,SAAS,EAAEU,UAAU,CAACN,WAAW,GAAG,YAAAO,MAAA,CAAYP,WAAW,CAAE,GAAG,UAAU,EAAEJ,SAAS;EAAC,GAClFK,IAAI;IACRP,GAAG,EAAEA;EAAG,IAEPC,QAAQ,CACC;AAEhB,CAAC;AAEDJ,UAAU,CAACiB,SAAS,GAAG;EACrBb,QAAQ,EAAEc,SAAS,CAACC,IAAI;EACxBd,SAAS,EAAEa,SAAS,CAACE,MAAM;EAC3Bb,SAAS,EAAEW,SAAS,CAACG,WAAW;EAChCZ,WAAW,EAAES,SAAS,CAACI,KAAK,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC;CAC/C;AAEDtB,UAAU,CAACuB,WAAW,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}