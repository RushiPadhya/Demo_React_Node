{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nvar CListGroup = forwardRef(function (_a, ref) {\n  var _b;\n  var children = _a.children,\n    className = _a.className,\n    _c = _a.component,\n    Component = _c === void 0 ? 'ul' : _c,\n    flush = _a.flush,\n    layout = _a.layout;\n  return React.createElement(Component, {\n    className: classNames('list-group', (_b = {\n      'list-group-flush': flush\n    }, _b[\"list-group-\".concat(layout)] = layout, _b), className),\n    ref: ref\n  }, children);\n});\nCListGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  flush: PropTypes.bool,\n  layout: PropTypes.oneOf(['horizontal', 'horizontal-sm', 'horizontal-md', 'horizontal-lg', 'horizontal-xl', 'horizontal-xxl'])\n};\nCListGroup.displayName = 'CListGroup';\nexport { CListGroup };","map":{"version":3,"names":["CListGroup","forwardRef","_a","ref","children","className","_c","component","Component","flush","layout","React","createElement","classNames","_b","concat","propTypes","PropTypes","node","string","elementType","bool","oneOf","displayName"],"sources":["C:\\Users\\Syndell025\\OneDrive\\Documents\\GitHub\\Demo_React_Node\\frontend\\node_modules\\@coreui\\react\\src\\components\\list-group\\CListGroup.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CListGroupProps extends HTMLAttributes<HTMLDivElement | HTMLUListElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Remove some borders and rounded corners to render list group items edge-to-edge in a parent component (e.g., `<CCard>`).\n   */\n  flush?: boolean\n  /**\n   * Specify a layout type.\n   */\n  layout?:\n    | 'horizontal'\n    | 'horizontal-sm'\n    | 'horizontal-md'\n    | 'horizontal-lg'\n    | 'horizontal-xl'\n    | 'horizontal-xxl'\n}\n\nexport const CListGroup = forwardRef<HTMLDivElement | HTMLUListElement, CListGroupProps>(\n  ({ children, className, component: Component = 'ul', flush, layout }, ref) => {\n    return (\n      <Component\n        className={classNames(\n          'list-group',\n          {\n            'list-group-flush': flush,\n            [`list-group-${layout}`]: layout,\n          },\n          className,\n        )}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCListGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  flush: PropTypes.bool,\n  layout: PropTypes.oneOf([\n    'horizontal',\n    'horizontal-sm',\n    'horizontal-md',\n    'horizontal-lg',\n    'horizontal-xl',\n    'horizontal-xxl',\n  ]),\n}\n\nCListGroup.displayName = 'CListGroup'\n"],"mappings":";;;IA6BaA,UAAU,GAAGC,UAAU,CAClC,UAACC,EAAmE,EAAEC,GAAG;;EAAtE,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,EAAA,GAAAJ,EAAA,CAAAK,SAA2B;IAAhBC,SAAS,GAAGF,EAAA,kBAAI,GAAAA,EAAA;IAAEG,KAAK,GAAAP,EAAA,CAAAO,KAAA;IAAEC,MAAM,GAAAR,EAAA,CAAAQ,MAAA;EAChE,OACEC,KAAA,CAAAC,aAAA,CAACJ,SAAS;IACRH,SAAS,EAAEQ,UAAU,CACnB,YAAY,GAAAC,EAAA;MAEV,kBAAkB,EAAEL;OACpBK,EAAA,CAAC,aAAc,CAAAC,MAAA,CAAAL,MAAM,CAAE,IAAGA,MAAM,E,KAElCL,SAAS,CACV;IACDF,GAAG,EAAEA;EAAG,CAEP,EAAAC,QAAQ,CACC;AAEhB,CAAC;AAGHJ,UAAU,CAACgB,SAAS,GAAG;EACrBZ,QAAQ,EAAEa,SAAS,CAACC,IAAI;EACxBb,SAAS,EAAEY,SAAS,CAACE,MAAM;EAC3BZ,SAAS,EAAEU,SAAS,CAACG,WAAW;EAChCX,KAAK,EAAEQ,SAAS,CAACI,IAAI;EACrBX,MAAM,EAAEO,SAAS,CAACK,KAAK,CAAC,CACtB,YAAY,EACZ,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,gBAAgB,CACjB;CACF;AAEDtB,UAAU,CAACuB,WAAW,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}