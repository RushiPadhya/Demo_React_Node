{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../node_modules/classnames/index.js';\nimport { colorPropType } from '../../props.js';\nvar CCard = forwardRef(function (_a, ref) {\n  var _b;\n  var children = _a.children,\n    className = _a.className,\n    color = _a.color,\n    textColor = _a.textColor,\n    rest = __rest(_a, [\"children\", \"className\", \"color\", \"textColor\"]);\n  return React.createElement(\"div\", __assign({\n    className: classNames('card', (_b = {}, _b[\"bg-\".concat(color)] = color, _b[\"text-\".concat(textColor)] = textColor, _b), className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textColor: PropTypes.string\n};\nCCard.displayName = 'CCard';\nexport { CCard };","map":{"version":3,"names":["CCard","forwardRef","_a","ref","children","className","color","textColor","rest","__rest","React","createElement","__assign","classNames","_b","concat","propTypes","PropTypes","node","string","colorPropType","displayName"],"sources":["C:\\Users\\Syndell025\\OneDrive\\Documents\\GitHub\\Demo_React_Node\\frontend\\node_modules\\@coreui\\react\\src\\components\\card\\CCard.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n"],"mappings":";;;;;IA0BaA,KAAK,GAAGC,UAAU,CAC7B,UAACC,EAAkD,EAAEC,GAAG;;EAArD,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,KAAK,GAAAJ,EAAA,CAAAI,KAAA;IAAEC,SAAS,GAAAL,EAAA,CAAAK,SAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAP,EAAA,EAAhD,+CAAkD,CAAF;EAC/C,OACEQ,KACE,CAAAC,aAAA,QAAAC,QAAA;IAAAP,SAAS,EAAEQ,UAAU,CACnB,MAAM,GAAAC,EAAA,OAEJA,EAAA,CAAC,KAAM,CAAAC,MAAA,CAAAT,KAAK,CAAE,IAAGA,KAAK,EACtBQ,EAAA,CAAC,OAAQ,CAAAC,MAAA,CAAAR,SAAS,CAAE,IAAGA,SAAS,E,KAElCF,SAAS;EACV,CACG,EAAAG,IAAI,EACR;IAAAL,GAAG,EAAEA;EAAG,CAEP,GAAAC,QAAQ,CACL;AAEV,CAAC;AAGHJ,KAAK,CAACgB,SAAS,GAAG;EAChBZ,QAAQ,EAAEa,SAAS,CAACC,IAAI;EACxBb,SAAS,EAAEY,SAAS,CAACE,MAAM;EAC3Bb,KAAK,EAAEc,aAAa;EACpBb,SAAS,EAAEU,SAAS,CAACE;CACtB;AAEDnB,KAAK,CAACqB,WAAW,GAAG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}