{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { CCloseButton } from '../close-button/CCloseButton.js';\nimport { CToastContext } from './CToast.js';\nvar CToastClose = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    Component = _a.component,\n    rest = __rest(_a, [\"children\", \"component\"]);\n  var setVisible = useContext(CToastContext).setVisible;\n  return Component ? React.createElement(Component, __assign({\n    onClick: function () {\n      return setVisible(false);\n    }\n  }, rest, {\n    ref: ref\n  }), children) : React.createElement(CCloseButton, __assign({\n    onClick: function () {\n      return setVisible(false);\n    }\n  }, rest, {\n    ref: ref\n  }));\n});\nCToastClose.propTypes = __assign(__assign({}, CCloseButton.propTypes), {\n  component: PropTypes.elementType\n});\nCToastClose.displayName = 'CToastClose';\nexport { CToastClose };","map":{"version":3,"names":["CToastClose","forwardRef","_a","ref","children","Component","component","rest","__rest","setVisible","useContext","CToastContext","React","createElement","__assign","onClick","CCloseButton","propTypes","PropTypes","elementType","displayName"],"sources":["C:\\Users\\Syndell025\\OneDrive\\Documents\\GitHub\\Demo_React_Node\\frontend\\node_modules\\@coreui\\react\\src\\components\\toast\\CToastClose.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, useContext } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CButtonProps } from '../button/CButton'\nimport { CCloseButton, CCloseButtonProps } from '../close-button/CCloseButton'\n\nimport { CToastContext } from './CToast'\n\ntype CombineButtonProps = CCloseButtonProps & CButtonProps\n\nexport interface CToastCloseProps extends CombineButtonProps {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CToastClose = forwardRef<HTMLButtonElement, CToastCloseProps>(\n  ({ children, component: Component, ...rest }, ref) => {\n    const { setVisible } = useContext(CToastContext)\n    return Component ? (\n      <Component onClick={() => setVisible(false)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    ) : (\n      <CCloseButton onClick={() => setVisible(false)} {...rest} ref={ref} />\n    )\n  },\n)\n\nCToastClose.propTypes = {\n  ...CCloseButton.propTypes,\n  component: PropTypes.elementType,\n}\n\nCToastClose.displayName = 'CToastClose'\n"],"mappings":";;;;;IAiBaA,WAAW,GAAGC,UAAU,CACnC,UAACC,EAA2C,EAAEC,GAAG;EAA9C,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAaC,SAAS,GAAAH,EAAA,CAAAI,SAAA;IAAKC,IAAI,GAAzCC,MAAA,CAAAN,EAAA,2BAA2C,CAAF;EAChC,IAAAO,UAAU,GAAKC,UAAU,CAACC,aAAa,CAAC,CAAAF,UAA9B;EAClB,OAAOJ,SAAS,GACdO,KAAA,CAAAC,aAAA,CAACR,SAAS,EAAAS,QAAA;IAACC,OAAO,EAAE,SAAAA,CAAA,EAAM;MAAA,OAAAN,UAAU,CAAC,KAAK,CAAC;IAAA;EAAA,GAAMF,IAAI,EAAE;IAAAJ,GAAG,EAAEA;EAAG,CAC5D,GAAAC,QAAQ,CACC,GAEZQ,KAAA,CAAAC,aAAA,CAACG,YAAY,EAACF,QAAA;IAAAC,OAAO,EAAE,SAAAA,CAAA;MAAM,OAAAN,UAAU,CAAC,KAAK,CAAC;IAAjB;EAAiB,CAAM,EAAAF,IAAI,EAAE;IAAAJ,GAAG,EAAEA;EAAG,CAAI,EACvE;AACH,CAAC;AAGHH,WAAW,CAACiB,SAAS,GAChBH,QAAA,CAAAA,QAAA,KAAAE,YAAY,CAACC,SAAS,CACzB;EAAAX,SAAS,EAAEY,SAAS,CAACC;AAAW,EACjC;AAEDnB,WAAW,CAACoB,WAAW,GAAG,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}